<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_26624_earthquake.Earthquake</api_name>
        <client_callable>false</client_callable>
        <description>Imports ans saves new earthquake data.</description>
        <name>Earthquake</name>
        <script><![CDATA[var Earthquake = Class.create();
Earthquake.prototype = {
	initialize: function() {
		this.eqTableName = gs.getCurrentScopeName() + '_earthquake';
		
		this.minMag = gs.getProperty(this.eqTableName + '.magnitude.minimum', 3.0);
		this.maxMag = gs.getProperty(this.eqTableName + '.magnitude.maximum');
		
		this.restMsg = gs.getCurrentScopeName() + '.Get Daily Earthquakes';
	},
	
	saveFrom: function(lastUpdateGDT) {
		var startUTC = this._getLastUpdateTime();
		
		if(!startUTC)
			throw "No startTime to use for API query.";
		
		try {
			var body = this._getRESTBody(startUTC);			
			var obj = new global.JSON().decode(body);
			
			if(obj.features) {
				var gr = new GlideRecord(this.eqTableName);
				for(var i = 0; i < obj.features.length; i++) {
					if(gr.get('number', obj.features[i].id)) {
						this._insertData(obj.features[i], gr); // update existing
						gr.update();
					}
					else {
						gr.initialize();
						this._insertData(obj.features[i], gr); // create new
						gr.insert();
					}
				}
			}
			else
				gs.log("No new earthquake data to handle");
		}
		catch(err) {
			throw "There was a problem getting earthquake data. " + err;
		}
		
	},
	
	_getRESTBody: function(startTime) {
		try {
			var r = new sn_ws.RESTMessageV2(this.restMsg, 'get');
			r.setStringParameter('format', 'geojson');
			r.setStringParameter('minmag', this.minMag);
			r.setStringParameter('starttime', startTime);
			if(this.maxMag)
				r.setStringParameter('maxmag', this.maxMag);
			
			var response = r.execute();
			var responseBody = response.getBody();
			var httpStatus = response.getStatusCode();
			
			if(httpStatus == 200)
				return responseBody;
			
			throw "Got response httpStatus = " + httpStatus + " with request body = " + r.getRequestBody();
		}
		catch(err) {
			throw err;
		}
		
		return;
	},
	
	_getLastUpdateTime: function() {
		var gr = new GlideRecord(this.eqTableName);
		gr.orderByDesc('u_time');
		gr.setLimit(1);
		gr.query();
		
		var th = new TimeHelper();
		
		return gr.next() ? th.localGDTtoUTC(gr.u_time) : th.getYesterdayDate();
	},
	
	_insertData: function(obj, gr) {
		gr.number = obj.id;
		gr.u_title = obj.properties.title;
		gr.u_place = obj.properties.place;
		gr.u_magnitude = obj.properties.mag;
		gr.u_longitude = obj.geometry.coordinates[0];
		gr.u_latitude = obj.geometry.coordinates[1];
		gr.u_time = new TimeHelper().msToGDT(obj.properties.time);
	},
	
	type: 'Earthquake'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>magnus</sys_created_by>
        <sys_created_on>2016-10-14 20:51:58</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_id>f824c250db222200ed5df6fdbf9619ff</sys_id>
        <sys_mod_count>18</sys_mod_count>
        <sys_name>Earthquake</sys_name>
        <sys_package display_value="Earthquake" source="x_26624_earthquake">af6340abdb862200ed5df6fdbf9619dd</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Earthquake">af6340abdb862200ed5df6fdbf9619dd</sys_scope>
        <sys_update_name>sys_script_include_f824c250db222200ed5df6fdbf9619ff</sys_update_name>
        <sys_updated_by>magnus</sys_updated_by>
        <sys_updated_on>2016-10-15 22:26:17</sys_updated_on>
    </sys_script_include>
</record_update>
